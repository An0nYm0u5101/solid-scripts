#!/bin/bash

clear

# Colors Vars
dgrey="\033[0;34m"
port="\033[0;33m"
RED="\033[1;31m"
GREEN="\033[2;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
RED="\033[0;31m"
ENDCOLOR="\033[0m"
# End Color Vars

parent=`dirname $PWD`
grandparent=`dirname $parent`

# Absolute path to this script, e.g. /home/user/bin/foo.sh
SCRIPT=$(readlink -f "$0")

# Absolute path this script is in, thus /home/user/bin
SCRIPTPATH=$(dirname "$SCRIPT")

echo -e $RED"#################################################################"$ENDCOLOR;
echo -e $YELLOW"   ____     ___    __  ____       __  _             ____  ____"$ENDCOLOR;
echo -e $YELLOW"  / __/__  / (_)__/ / / __ \___  / /_(_)__  ___    / __ \/ __/"$ENDCOLOR;
echo -e $YELLOW" _\ \/ _ \/ / / _  / / /_/ / _ \/ __/ / _ \/ _ \  / /_/ /\ \  "$ENDCOLOR;
echo -e $YELLOW"/___/\___/_/_/\_,_/  \____/ .__/\__/_/\___/_//_/  \____/___/  "$ENDCOLOR;
echo -e $YELLOW"                         /_/                                  "$ENDCOLOR;
echo -e $RED"#################################################################"$ENDCOLOR;
echo -e $BLUE"#                                 ||"$ENDCOLOR;
echo -e $BLUE"#                                 ||_________________________/'|"$ENDCOLOR;
echo -e $BLUE"#                               _| O======/                    |"$ENDCOLOR;
echo -e $BLUE"#                              |_|               ============  |"$ENDCOLOR;
echo -e $BLUE"#                                |  __   ______________________|"$ENDCOLOR;
echo -e $BLUE"#                                |_/  )  (    |___||     O-   /"$ENDCOLOR;
echo -e $BLUE"#  C a r p e   O m n i o u s          (  )    /  / |_________/"$ENDCOLOR;
echo -e $BLUE"#                                     (  )   /  /    | ) |   |"$ENDCOLOR;
echo -e $BLUE"#                                     (__)  /  /     \___|__("$ENDCOLOR;
echo -e $BLUE"#                                          /  /          )   \ "$ENDCOLOR;
echo -e $BLUE"#                                         /  /            )   \ "$ENDCOLOR;
echo -e $BLUE"#                                        /  /              )___\ "$ENDCOLOR;
echo -e $BLUE"#                                       /  / "$ENDCOLOR;
echo -e $BLUE"#                                      /__/"$ENDCOLOR;
echo -e $BLUE"#                                "$ENDCOLOR;
echo ""
echo -e $YELLOW"Thank you for choosing SolidOptionOS!"$ENDCOLOR;
echo ""
echo -e $YELLOW"This is a post installation script designed for the solid-scripts drive or downloaded OS"$ENDCOLOR;
echo -e $YELLOW" you either purchased or downloaded online to give you a simpler, more robust user experience with the OS and its tools."$ENDCOLOR;

echo -e $YELLOW"Let's get started"$ENDCOLOR;
echo ""
echo ""

homepath_default=$HOME
read -p "Please set your home path (leave out trailing /'s): [$homepath_default] " homepath_default
HOMEPATH=${HOMEPATH:-$homepath_default}
echo ""
echo -e $BLUE"Your home path is set to $HOMEPATH/."$ENDCOLOR;
echo ""

installpath_default=$HOMEPATH
read -p "Please set solid-scripts install path (leave out trailing /'s): [$installpath_default] " installpath_default
INSTALLPATH=${INSTALLPATH:-$installpath_default}
echo ""
echo -e $BLUE"Your solid-scripts install path is set to $INSTALLPATH/."$ENDCOLOR;
echo ""

bashrc_default="Y"
read -p "Would you like to update your bashrc from SolidOptionOS cache? " bashrc_default
bashrc=${bashrc:-$bashrc_default}

if [[ $bashrc = "bashrc_default" || $bashrc = 'y' ]] ; then

  echo ""
  echo -e $BLUE"Backing up original bashrc.."$ENDCOLOR;
  echo ""
  sudo cp $HOMEPATH/.bashrc $HOMEPATH/.bashrc.backup
  echo -e $YELLOW"Backup complete."$ENDCOLOR;
  echo ""
  sleep 1

  echo -e $BLUE"Updating bashrc with SolidOptionOS bashrc.."$ENDCOLOR;
  echo ""
  sudo cp $INSTALLPATH/solid-scripts/post-install-scripts/assets/bashrc $HOMEPATH/.bashrc
  echo -e $YELLOW"Complete."$ENDCOLOR;
  echo ""
  
  echo -e $BLUE"Sourcing new bashrc.."$ENDCOLOR;
  echo ""
  source $HOMEPATH/.bashrc
  echo -e $YELLOW"Complete."$ENDCOLOR;
  echo ""

else
 
  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi

echo -e $BLUE"Adding necessities to /usr/local/bin/"$ENDCOLOR;
echo ""
sudo cp $INSTALLPATH/solid-scripts/troubleshoot-networking-issues/restart-network /usr/local/bin/
sudo cp $INSTALLPATH/solid-scripts/cleaning-scripts/clear-cache /usr/local/bin/
sudo cp $INSTALLPATH/solid-scripts/update-helper-scripts/solid-update
sudo cp $INSTALLPATH/solid-scripts/configuration-scripts/setup-hostname-new /usr/local/bin
sudo cp $INSTALLPATH/solid-scripts/configuration-scripts/install-mt7610
sudo cp $INSTALLPATH/solid-scripts/configuration-scripts/gpg-update
echo ""
echo -e $YELLOW"Complete"$ENDCOLOR;
echo ""

#aliases_default="Y"
#read -p "Do you want to add custom alias to your bashrc? [$aliases_default/n] " aliases_default
#aliases=${aliases:-$aliases_default}

#if [[ $aliases = "aliases_default" || $aliases = 'y' ]] ; then
	
#  echo ""
#  echo -e $BLUE"Adding aliases to .bashrc.."$ENDCOLOR;
#  echo ""
#  touch $HOMEPATH/.bash_aliases
#  echo "alias xclip='xclip -selection c'" >> $HOMEPATH/.bash_aliases
#  echo "alias goto-solid-scripts='cd $HOMEPATH/solid-scripts/'" >> $HOMEPATH/.bash_aliases
#  echo "alias xclip='xargs echo -n | xclip -selection clipboard -c'" >> $HOMEPATH/.bash_aliases
# 
#  echo ""

#else

#  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
#  echo ""

#fi

netmanage_default="Y"
read -p "Do you want to install Network-Manager and configure the interfaces for easy ifup ifdown? [$netmanage_default,n] " netmanage_default
netmanage=${netmanage:-$netmanage_default}

if [[ $netmanage = "netmanage_default" || $netmanage = "y" ]] ; then

  echo -e $BLUE"Installing Network-Manager.."$ENDCOLOR;
  echo ""
  sudo apt-get build-dep network-manager network-manager-gnome network-manager-dev network-manager-ssh network-manager-ssh-gnome 
  sudo apt install network-manager network-manager-gnome  network-manager-dev network-manager-ssh network-manager-ssh-gnome 
  echo ""
	
  echo -e $BLUE"Modifying NetworkManager.conf to allow for managed interfaces.."$ENDCOLOR;
  echo ""
  echo ""
  sudo sed -i 's/false/true/g' /etc/NetworkManager/NetworkManager.conf
  echo ""
	
  cat /etc/NetworkManager/NetworkManager.conf
  echo ""
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi
rolling_default="Y"
read -p "Do you want to add Kali-Rolling, Kali-Dev, and Kali-Bleeding Edge to your sources? [$rolling_default/n]" rolling_default
rolling=${rolling:-$rolling_default}

if [[ $rolling = "rolling_default" || $rolling = "y" ]] ; then

  echo ""
  echo -e $BLUE"Checking sources.list.."$ENDCOLOR;
  echo "" 
  echo ""
  cat /etc/apt/sources.list
  echo ""
  echo ""
	
  echo -e $BLUE"Backing up original sources.list file in /root/backup.."$ENDCOLOR;
  echo ""
  echo ""
  sudo mkdir -p $HOMEPATH/backup/sources
  sudo cp -rf /etc/apt/ $HOMEPATH/backup/sources/
  echo -e $GREEN"The entire /etc/apt folder has been backed up to /root/backup/sources/"$ENDCOLOR;
  echo ""
	
  echo -e $BLUE"Updating sources.list.."$ENDCOLOR;
  echo ""
  echo ""
  sudo cat << EOF > /etc/apt/sources.list
# Kali-Rolling Repos
deb http://http.kali.org/kali kali-rolling main contrib non-free
deb-src http://http.kali.org/kali kali-rolling main contrib non-free
# Kali-Dev Repos
deb http://http.kali.org/kali kali-dev main contrib non-free
deb-src http://http.kali.org/kali kali-dev main contrib non-free
# Kali-Bleeding-Edge
deb http://http.kali.org/kali kali-bleeding-edge main contrib non-free
deb-src http://http.kali.org/kali kali-bleeding-edge main contrib non-free
EOF
  echo ""
  echo ""

  echo -e $BLUE"Adding PGP keys.."$ENDCOLOR;
  echo ""
  echo ""
  sudo gpg –keyserverpgppkeys.mit.edu –recv-key ED444FF07D8D0BF6
  sudo gpg -a –export ED444FF07D8D0BF6| sudo apt-key add –
  echo ""
  echo -e $GREEN"PGP Keys successfully added."$ENDCOLOR;
  echo ""
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi
#bleeding_default="Y"
#read -p "Do you want to enable Kali Bleeding-Edge Repos? [$bleeding_default,n] " bleeding_default
#bleeding=${bleeding:-$bleeding_default}
#
#if [[ $bleeding = "bleeding_default" || $bleeding = "y" ]] ; then
#
#  sudo sed -i 's/\#deb\ http\:\/\/http.kali.org\/kali\ kali\-bleeding\-edge\ main\ contrib\ non\-free/deb\ http\:\/\/http.kali.org\/kali\ kali\-bleeding\-edge\ main\ contrib\ non\-free/g' /etc/apt/sources.list 
#  sudo sed -i 's/\#deb\-src\ http\:\/\/http.kali.org\/kali\ kali\-bleeding\-edge\ main\ contrib\ non\-free/deb\-src\ http\:\/\/http.kali.org\/kali\ kali\-bleeding\-edge\ main\ contrib\ non\-free/g' /etc/apt/sources.list 
#  echo ""
#  sudo cat /etc/apt/sources.list
#  echo ""

#else

#  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
#  echo ""
#  echo""

#fi
configopenssh_default="Y"
read -p "Do you want to install and configure openssh-server? [$configopenssh_default,n] " configopenssh_default
configopenssh=${configopenssh:-$configopenssh_default}


if [[ $configopenssh = "configopenssh_default" || $configopenssh = 'y' ]]; then

  echo -e $BLUE"Installing openssh-server.."$ENDCOLOR;
  echo ""
  sudo apt update && sudo apt install openssh-server -y
  echo -e $GREEN"Complete."$ENDCOLOR;
  echo ""

  echo -e $BLUE"Backing up original ssh tokens.."$ENDCOLOR;
  echo ""

  if [[ ! -e /etc/ssh/oldies ]] ; then

	sudo mkdir /etc/ssh/old-keys

  fi

  sudo mv /etc/ssh/ssh_host* /etc/ssh/old-keys
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""

  echo -e $BLUE"Reconfiguring openssh-server.."$ENDCOLOR;
  echo ""
  sudo dpkg-reconfigure openssh-server
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo -e $GREEN"Success! Default ssh keys backed-up and regenerated."$ENDCOLOR;
  echo ""

else

  echo -e $YELLOW"Okay. maybe later."$ENDCOLOR;
  echo ""

fi
multiarch_default="Y"
read -p "Would you like to install and configure multiarch-support? [$multiarch_default,n] " multiarch_default
multiarch=${multiarch:-$multiarch_default}


if [[ $multiarch = "multiarch_default" || $multiarch = "y" ]]; then

	echo -e $BLUE"Adding multiarch-support.."$ENDCOLOR;
	echo ""
	sudo apt-get build-dep multiarch-support
	sudo apt install multiarch-support -y
	echo ""

  	addedArch_default="i386"
  	read -p "If you want to add any additional architectures, enter them here [$addedArch_default, armhf, amd64, etc.]"
 	addedArch=${addedArch:-$addedArch_default}

	if [[ $addedArch = "addedArch_default" || $multiarch = 'i386' ]]; then

  		echo -e $BLUE"Adding i386 architecture.."$ENDCOLOR;
  		echo ""
  		sudo dpkg --add-architecture i386
  		echo -e $GREEN"Complete."$ENDCOLOR;
  		echo ""
 	fi	
	if [[ $addedArch = 'amd64' ]] ; then

		echo -e $BLUE"Adding amd64 architecture.."$ENDCOLOR;	  
		echo ""
		sudo dpkg --add-architecture amd64
		echo -e $GREEN"Complete."$ENDCOLOR;
		echo ""
	fi
	if [[ $addedArch = 'armhf' ]] ; then 

		echo -e $BLUE"Adding armhf architecture.."$ENDCOLOR;
		echo ""
		sudo dpkg --add-architecture armhf
		echo -e $GREEN"Complete."$ENDCOLOR;
		echo ""
	fi
	if [[ $addedArch = 'arm' ]] ; then

		echo -e $BLUE"Adding arm architecture .."$ENDCOLOR;
		echo ""
		sudo dpkg --add-architecture arm
		echo -e $GREEN"Complete."$ENDCOLOR;
		echo ""

	fi	

else

	echo ""
	echo -e $BLUE"Okay. Maybe Later."$ENDCOLOR;
	echo ""

fi


upandup_default="Y"
read -p "Would you like to update and upgrade? [$upandup_default,n] " upandup_default
upandup=${upandup:-$upandup_default}

if [[ $upandup = "upandup_default" || $upandup = 'y' ]]; then

  echo -e $BLUE"Updating and upgrading.."$ENDCOLOR;
  echo ""
  sudo dpkg --configure -a
  sudo apt update
  sudo apt -f install -y
  sudo apt autoremove -y
  sudo apt upgrade -y
  sudo apt dist-upgrade
  echo ""
  echo -e $GREEN"Success! Your system is now up-to-date."$ENDCOLOR;
  echo ""

else

  echo -e $YELLOW"Okay. maybe later."$ENDCOLOR;
  echo ""

fi
extra_default="Y"
read -p "Would you like to install some preferred extras? WARNING: IF YOU ARE NOT RUNNING THE MOST RECENT VERSION OF KALI, THIS IS NOT RECOMMENDED. [$extra_default/n] " extra_default
extra=${extra:-$extra_default}

if [[ $extra = "extra_default" || $extra = "y" ]] ; then
 
  #echo -e $BLUE"First we will update / install linux-headers-$(uname -r)."$ENDCOLOR;
  #echo ""

  # Temporarily disabling linux-headers-$(uname -r) install
  #sudo apt install linux-headers-$(uname -r)
  #echo -e $YELLOW"Complete."$ENDCOLOR;
  #echo ""
  #sleep 1
  
  echo -e $BLUE"Installing lshw bash-completion xclip arduino lsof usbutils alsa-utils rtl-sdr rtlsdr-scanner pixiewps reaver wireshark adb fern-wifi-cracker tor cowpatty pyrit live-build metasploit-framework ghc cabal-install cabal-debian shellcheck ettercap-common ettercap-graphical nmap thc-ipv6 thc-pptp-bruter thc-ssl-dos putty putty-tools putty-doc netcat kismet ieee-data unrar unace p7zip zip unzip p7zip-full p7zip-rar file-roller filezilla filezilla-common gtk-recordmydesktop recordmydesktop remmina htop tor nethogs gdebi  scrot lsb-release gcc g++ build-essential kbuild cmake make kbuild locate aptitude bully pixiewps reaver wireshark-common wireshark-dev wireshark-gtk kismet-plugins screenfetch git-all libssl-dev opencl-headers hashcat-data"$ENDCOLOR; 
  echo ""
  sudo apt-get build-dep lshw bash-completion xclip arduino lsof usbutils alsa-utils rtl-sdr rtlsdr-scanner pixiewps reaver wireshark adb fern-wifi-cracker tor cowpatty pyrit live-build metasploit-framework ghc cabal-install cabal-debian shellcheck ettercap-common ettercap-graphical nmap thc-ipv6 thc-pptp-bruter thc-ssl-dos putty putty-tools putty-doc netcat kismet ieee-data unrar unace p7zip zip unzip p7zip-full p7zip-rar file-roller filezilla filezilla-common gtk-recordmydesktop recordmydesktop remmina htop tor nethogs gdebi  scrot lsb-release gcc g++ build-essential kbuild cmake make kbuild locate aptitude bully pixiewps reaver wireshark-common wireshark-dev wireshark-gtk kismet-plugins screenfetch git-all libssl-dev opencl-headers hashcat-data 
  echo ""
  sudo apt install lshw bash-completion xclip arduino lsof usbutils alsa-utils rtl-sdr rtlsdr-scanner pixiewps reaver wireshark adb fern-wifi-cracker tor cowpatty pyrit live-build metasploit-framework ghc cabal-install cabal-debian shellcheck ettercap-common ettercap-graphical nmap thc-ipv6 thc-pptp-bruter thc-ssl-dos putty putty-tools putty-doc netcat kismet ieee-data unrar unace p7zip zip unzip p7zip-full p7zip-rar file-roller filezilla filezilla-common gtk-recordmydesktop recordmydesktop remmina htop tor nethogs gdebi  scrot lsb-release gcc g++ build-essential kbuild cmake make kbuild locate aptitude bully pixiewps reaver wireshark-common wireshark-dev wireshark-gtk kismet-plugins screenfetch git-all libssl-dev opencl-headers hashcat-data 
  echo ""
  echo -e $BLUE"Installing firmware-atheros firmware-realtek firmware-ath9k-htc firmware-ralink"$ENDCOLOR;
  sudo apt-get build-dep firmware-atheros firmware-realtek firmware-ath9k-htc firmware-ralink 
  sudo apt-get install firmware-atheros firmeare-realtek firmware-ath9k-htc firmware-ralink
  echo ""
  echo -e $BLUE"Installing exfat-fuse exfat-utils f2fs-tools hfsutils hfsprogs jfsutils hfsplus  hfst-ospell hfst-ospell-dev util-linux util-linux-locales cryptcat crypt++el cryptol cryptsetup cryptsetup-bin cryptsetup-initramfs dmsetup nilfs-tools ntfs-3g ntfs-3g-dev reiser4progs reiserfsprogs udfclient  xfsprogs xfsdump lvm2 lvm2-dbusd luksipc btrfs-progs btrfsmaintenance btrfs-compsize btrfs-heatmap btrfs-compsize gpart gparted libreadline-gplv2-dev"$ENDCOLOR; 
  echo ""
  sudo apt-get build-dep exfat-fuse exfat-utils f2fs-tools hfsutils hfsprogs jfsutils hfsplus  hfst-ospell hfst-ospell-dev util-linux util-linux-locales cryptcat crypt++el cryptol cryptsetup cryptsetup-bin cryptsetup-initramfs dmsetup nilfs-tools ntfs-3g ntfs-3g-dev reiser4progs reiserfsprogs udfclient  xfsprogs xfsdump lvm2 lvm2-dbusd luksipc btrfs-progs btrfsmaintenance btrfs-compsize btrfs-heatmap btrfs-compsize gpart gparted libreadline-gplv2-dev 
  echo ""
  sudo apt-get install exfat-fuse exfat-utils f2fs-tools hfsutils hfsprogs jfsutils hfsplus  hfst-ospell hfst-ospell-dev util-linux util-linux-locales cryptcat crypt++el cryptol cryptsetup cryptsetup-bin cryptsetup-initramfs dmsetup nilfs-tools ntfs-3g ntfs-3g-dev reiser4progs reiserfsprogs udfclient  xfsprogs xfsdump lvm2 lvm2-dbusd luksipc btrfs-progs btrfsmaintenance btrfs-compsize btrfs-heatmap btrfs-compsize gpart gparted libreadline-gplv2-dev
  echo ""
  echo -e $GREEN"Complete."$ENDCOLOR;
  echo ""
  
  echo -e $BLUE"Updating htop style"$ENDCOLOR:
  sudo mkdir -p $HOMEPATH/.config/htop

  if [[ ! -e $HOMEPATH/.config/htop ]] ; then
    
     sudo mkdir -p $HOMEPATH/.config/htop

  fi
  sudo mkdir -p $HOMEPATH/.config/htop/htoprc
  sudo cp $INSTALLPATH/solid-scripts/assets/htoprc $HOMEPATH/.config/htop/htoprc
  echo ""
  echo -e $GREEN"Success! Htop style upgraded."$ENDCOLOR;
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi 

echo -e $BLUE"Reconfiguring wireshark.."$ENDCOLOR;
echo ""
sudo dpkg-reconfigure wireshark-common
echo ""

echo -e $BLUE"Changing permissions of dumpcap.."$ENDCOLOR;
echo ""
sudo chmod a+x /usr/bin/dumpcap

NEWUSER_DEFAULT="Y"
read -p "Would you like to create a standard user? [$NEWUSER_DEFAULT/n] " NEWUSER_DEFAULT
NEWUSER=${NEWUSER:-$NEWUSER_DEFAULT}

if [[ $NEWUSER = "NEWUSER_DEFAULT" || $NEWUSER = 'y' ]] ; then 

  echo -e $YELLOW"Username: [enter username] "$ENDCOLOR;
  read USERNAME
  echo ""
	
  echo -e $BLUE"Creating standard user, $USERNAME.."$ENDCOLOR;
  echo ""
  sudo useradd -m $USERNAME
  echo -e $GREEN"Complete."$ENDCOLOR;
  echo ""

  echo -e $BLUE"Creating home directories for $USERNAME..."$ENDCOLOR;
  echo ""
  sudo mkdir -p /home/$USERNAME/Downloads
  sudo mkdir -p /home/$USERNAME/Pictures
  sudo mkdir -p /home/$USERNAME/Documents
  sudo mkdir -p /home/$USERNAME/Desktop
  sudo chown -R $USERNAME:$USERNAME /home/$USERNAME
  sudo chmod -R 755 /home/$USERNAME
  echo ""

  echo -e $BLUE"Adding $USERNAME to sudo group."$ENDCOLOR;
  sudo usermod -aG sudo $USERNAME
  echo ""
	
  echo -e $BLUE"Adding $USERNAME to adm group."$ENDCOLOR;
  sudo usermod -aG adm $USERNAME
  echo ""
        
  echo -e $BLUE"Adding $USERNAME to kismet group."$ENDCOLOR;
  sudo usermod -aG kismet $USERNAME
  echo ""
	
  echo -e $BLUE"Adding $USERNAME to netdev group."$ENDCOLOR;
  sudo usermod -aG netdev $USERNAME
  echo ""
	
  echo -e $BLUE"Adding $USERNAME to root group."$ENDCOLOR;
  sudo usermod -aG root $USERNAME
  echo ""
	
  echo -e $BLUE"Adding $USERNAME to wireshark group."$ENDCOLOR;
  sudo usermod -aG wireshark $USERNAME
  echo ""
  
  echo -e $BLUE"Adding $USERNAME to kismet group."$ENDCOLOR;
  sudo usermod -aG kismet $USERNAME 
  
  echo -e $BLUE"Updating $USERNAME shell to /bin/bash.."$ENDCOLOR;
  sudo usermod -s /bin/bash $USERNAME
  echo ""
  echo ""

  echo -e $YELLOW"Set a password for $USERNAME.."$ENDCOLOR;
  echo ""
  sudo passwd $USERNAME
  echo ""
  clonebashrc_default="Y"	
  read -p "Do you want to clone root bashrc to $USERNAME? [$clonebashrc_default/n] " clonebashrc_default
  clonebashrc=${clonebashrc:-$clonebashrc_default}

  if [[ $clonebashrc = "clonebashrc_default" || $clonebashrc = "y" ]] ; then 
	
    echo -e $BLUE"Backing up first.."$ENDCOLOR; 
    echo ""
    sudo cp /root/.bashrc /home/$USERNAME/.bashrc.bak
    sudo chown $USERNAME:$USERNAME /home/$USERNAME/.bashrc
    echo ""
    echo -e $GREEN"Complete."$ENDCOLOR;
    echo ""

  else

    echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
    echo ""
	
  fi

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi
addapt_default="Y"
read -p "Would you like to install and configure add-apt-repository? [$addapt_default,n] " addapt_default
addapt=${addapt:-$addapt_default}

if [[ $addapt = "addapt_default" || $addapt = "y" ]] ; then

  echo -e $BLUE"Installing and configuring add-apt-repository"$ENDCOLOR;
  echo ""

  echo -e $BLUE"Installing software-properties-common and apt-file.."$ENDCOLOR;
  echo ""
  sudo apt-get build-dep software-properties-common apt-file
  sudo apt install software-properties-common apt-file -y
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""

  echo -e $BLUE"Running apt-file update.  This may take a while depending on your system."$ENDCOLOR;
  echo ""
  sudo apt-file update
  echo ""

  echo -e $GREEN"Apt-file is now up to date."$ENDCOLOR;
  echo ""

  echo -e $BLUE"Using apt-file search to find add-apt-repository.."$ENDCOLOR;
  sudo apt-file search add-apt-repository
  echo ""

  echo -e $BLUE"Modifying add-apt-repository with $INSTALLPATH/solid-scripts/assets/add-apt-repository in /usr/sbin.."$ENDCOLOR;
  echo ""
  sudo cp $INSTALLPATH/solid-scripts/assets/add-apt-repository /usr/sbin/add-apt-repository
  sudo chmod o+x /usr/sbin/add-apt-repository
  sudo chown root:root /usr/sbin/add-apt-repository
  echo ""
  echo -e $GREEN"Success! Add-Apt-Repository installed."$ENDCOLOR;
  echo ""

else

  echo -e $YELLOW"Okay. maybe later."$ENDCOLOR;
  echo ""

fi
CUSTOMTHEMES_DEFAULT="Y"
read -p "Would you like to install custom themes and icons? [$CUSTOMTHEMES_DEFAULT/n] " CUSTOMTHEMES_DEFAULT
CUSTOMTHEMES=${CUSTOMTHEMES:-$CUSTOMTHEMES_DEFAULT}

if [[ $CUSTOMTHEMES = "CUSTOMTHEMES_DEFAULT" || $CUSTOMTHEMES = "y" ]] ; then

  sudo apt-file update
  echo -e $BLUE"Adding ppa:noobslab/themes.."$ENDCOLOR;
  echo ""
  sudo /usr/sbin/add-apt-repository ppa:noobslab/themes
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  
  echo -e $BLUE"Adding ppa:alecive/antigone.."$ENDCOLOR;
  echo ""
  sudo /usr/sbin/add-apt-repository ppa:alecive/antigone
  echo ""

  echo -e $GREEN"Success! New themes and icons are now available."$ENDCOLOR;
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi  

CHAT_DEFAULT="N"
read -p "Would you like to install CHAT PPA? [$CHAT_DEFAULT/n] " CHAT_DEFAULT
CHAT=${CAHT:-$CHAT_DEFAULT}

if [[ $CHAT = "Y" || $CHAT = "y" ]] ; then
	
  sudo apt-file update
  echo -e $BLUE"Adding ppa:noobslab/themes.."$ENDCOLOR;
  echo ""
  sudo /usr/sbin/add-apt-repository ppa:upubuntu-com/chat
  sudo apt update
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo -e $GREEN"Success! Now chat programs like Skype are available."$ENDCOLOR;
  echo ""

else
       
  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi
UBUNTU_DEFAULT="N"
read -p "Would you like to install Ubuntu PPAs? [$UBUNTU_DEFAULT/y] " UBUNTU_DEFAULT
UBUNTU=${UBUNTU:-$UBUNTU_DEFAULT}

if [[ $UBUNTU = "Y" || $UBUNTU = "y" ]] ; then

  echo -e $BLUE"Adding add-apt-repository-ubuntu.."$ENDCOLOR;
  echo ""
  sudo cp $INSTALLPATH/solid-scripts/assets/add-apt-repository-ubuntu /usr/sbin/add-apt-repository-ubuntu
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""  

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

#airmon_default="Y"
#read -p "Would you like to modify airmon-ng to create the classic monitor interfaces like mon0 instead of the new style like wlan0mon? [$airmon_default/n] " airmon_default
#airmon=${airmon:-$airmon_default}

#if [[ $airmon = "airmon_default" || $airmon = "y" ]] ; then

#  echo ""
#  echo -e $BLUE"Modifying airmon-ng.."$ENDCOLOR;
#  echo ""
#  echo ""
#  sudo apt install --reinstall aircrack-ng
#  echo ""
#  echo ""
#  echo -e $BLUE"Backing up airmon-ng.."$ENDCOLOR;
#  echo ""

#  if [[ ! -e /usr/sbin/airmon-ng-bak ]] ; then 
#    
#    mkdir $HOMEPATH/backup
#    sudo cp /usr/sbin/airmon-ng $HOMEPATH/backup/airmon-ng.backup
#
#    echo -e $GREEN"Done."$ENDCOLOR;
#    echo ""
#    echo ""
#
#    echo -e $BLUE"Modifying airmon-ng.."$ENDCOLOR;
#    echo ""
#    echo ""
#    sudo cp $INSTALLPATH/solid-scripts/assets/airmon-ng-old /usr/sbin/airmon-ng
#    sudo chown root:root /usr/sbin/airmon-ng
#    sudo chmod +x /usr/sbin/airmon-ng
#    echo -e $GREEN"Done."$ENDCOLOR;
#    echo ""
#    echo ""	
#
#    echo -e $GREEN"Airmon-ng successfully configured!"$ENDCOLOR;
#    echo ""
#    echo ""
# 
#  else

#    echo -e $YELLOW"Maybe later."$ENDCOLOR;
#    echo ""
#    echo ""
#
#  fi
#
#else

#  echo -e $YELLOW"Maybe later."$ENDCOLOR;
#  echo ""
#  echo ""
#
#fi

#echo ""
#screenfetch_default="Y"
#read -p "Would you like to install screenfetch? [$screenfetch_default,n] " screenfetch_default
#screenfetch=${screenfetch:-$screenfetch_default}
#
#if [[ $screenfetch = "screenfetch_default" || $screenfetch = "y" ]] ; then
#
#  echo -e $YELLOW"Installing prerequisites.."$ENDCOLOR;
#  echo ""
#  sudo apt install bc scrot lsb-release screenfetch -y
#  echo -e $GREEN"Done."$ENDCOLOR;
#  echo ""
#  echo -e $YELLOW"Installing and setting up screenfetch.."$ENDCOLOR;
#  echo ""
#  echo ""
#
#  if [[ ! -e $HOMEPATH/backup ]] ; then
#    mkdir -p $HOMEPATH/backup
#  fi 

#  cd $HOMEPATH/backup
#  echo -e $BLUE"Cloning screenFetch repository .. "$ENDCOLOR;
#  echo ""
#  git clone https://github.com/KittyKatt/screenFetch.git  
#  echo -e $GREEN"Done."$ENDCOLOR;
#  echo ""
#  echo ""
#
#  echo -e $BLUE"Adding screenfetch to /usr/local/bin.."$ENDCOLOR;
#  echo ""
#
#  if [[ ! -e /usr/local/bin/screenfetch ]] ; then 
#   
#    sudo mkdir -p /usr/local/bin	
#    sudo cp $HOMEPATH/backup/screenFetch/screenfetch-dev /usr/local/bin/screenfetch
#    echo -e $GREEN"Done."$ENDCOLOR;
#    echo ""
#    echo ""
#
#    echo -e $YELLOW"Setting as executable in /usr/local/bin.."$ENDCOLOR;
#    echo ""
#    sudo chmod +x /usr/local/bin/screenfetch
#    echo -e $GREEN"Done."$ENDCOLOR;
#    echo ""
#    echo ""
#	
#  fi

#  echo -e $GREEN"Screenfetch setup successfully!"$ENDCOLOR;
#  echo ""
#  echo ""
#
#else
#  
#  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
#  echo ""
#  echo ""
#
#fi
java_default="Y"
read -p "Woud you like to install Java SE? [$java_default,n] " java_default
java=${java:-$java_default}

if [[ $java = "java_default" || $java = "y" ]] ; then
  
  echo -e $BLUE"Downloading the Java SE JDK from SolidOptionOS server.. "$ENDCOLOR;
  echo ""

  if [[ ! -e $HOMEPATH/Downloads/jdk-7u79-linux-x64.tar.gz ]] ; then
  
    mkdir -p $HOMEPATH/Downloads		
    cd $HOMEPATH/Downloads
    wget http://solidoptionos.com/packages/jdk-7u79-linux-x64.tar.gz
    echo -e $GREEN"Download complete."$ENDCOLOR;
    echo ""
    echo ""

  else
    
    echo -e $BLUE"jdk-7u79-linux-x64.tar.gz already exists; skipping download."$ENDCOLOR;
    echo ""
    echo ""
	
  fi
	
  echo -e $BLUE"Extracting into /opt folder.."$ENDCOLOR;
  echo ""
  echo ""

  if [[ ! -e /opt/jdk1.7.0_79/ ]] ; then
    
    sudo tar -xzvf jdk-7u79-linux-x64.tar.gz -C /opt
    cd /opt/jdk1.7.0_79
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""
  
  else
		
    echo -e $BLUE"/opt/jdk1.7.0_79/ already exists; skipping extraction."$ENDCOLOR;
    echo ""
	
  fi

  echo -e $BLUE"Cleaning up afer installation.."$ENDCOLOR;
  echo ""
  sudo rm $HOMEPATH/Downloads/jdk-7u79-linux-x64.tar.gz*
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo ""

  echo -e $BLUE"Updating Java alternatives.."$ENDCOLOR;
  echo ""
  sudo update-alternatives --install /usr/bin/java java /opt/jdk1.7.0_79/bin/java 1
  sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.7.0_79/bin/javac 1
  sudo update-alternatives --install /usr/lib/mozilla/plugins/libjavaplugin.so mozilla-javaplugin.so /opt/jdk1.7.0_79/jre/lib/amd64/libnpjp2.so 1
  sudo update-alternatives --set java /opt/jdk1.7.0_79/bin/java
  sudo update-alternatives --set javac /opt/jdk1.7.0_79/bin/javac
  sudo update-alternatives --set mozilla-javaplugin.so /opt/jdk1.7.0_79/jre/lib/amd64/libnpjp2.so
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo -e $GREEN"Success! Java SE JDK Installed."$ENDCOLOR;
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi
wifite_default="Y"
read -p "Would you like to patch wifite with reaver and pixiewps? [$wifite_default/n] " wifite_default
wifite=${wifite:-$wifite_default}

if [[ $wifite = "wifite_default" || $wifite = "y" ]] ; then

  echo -e $YELLOW"Patching Wifite with Reaver and Pixiewps"$ENDCOLOR;
  echo ""
  echo ""

  if [[ ! -e $HOMEPATH/backup ]] ; then
    
    mkdir -p $HOMEPATH/backup
        
  fi

  echo -e $BLUE"Creating backup directory and capture directories.."$ENDCOLOR;
  echo ""
  mkdir -p $HOMEPATH/backup
  sudo mkdir -p /captures/hs
  sudo mkdir -p /captures/wireshark

  cd $HOMEPATH/backup
  echo ""
  echo ""

  echo -e $BLUE"Cloning wifite repository"$ENDCOLOR;
  echo ""
  git clone https://github.com/derv82/wifite.git
  echo ""
  echo ""

  echo -e $BLUE"Cloning wifite-mod-pixiewps repository"$ENDCOLOR;
  echo ""
  git clone https://github.com/aanarchyy/wifite-mod-pixiewps.git
  echo ""

  echo -e $BLUE"Cloning reaver-wps-fork-t6x repository"$ENDCOLOR;
  echo ""
  git clone https://github.com/t6x/reaver-wps-fork-t6x.git
  echo ""
	
  echo -e $BLUE"Cloning pixiewps repository"$ENDCOLOR;
  git clone https://github.com/wiire/pixiewps.git
  echo ""
  
  echo -e $BLUE"Cloning hcxdumptool repository"$ENDCOLOR;
  git clone https://github.com/ZerBea/hcxdumptool.git
  echo ""

  echo -e $BLUE"Cloning hcxtools repository"$ENDCOLOR;
  git clone https://github.com/ZerBea/hcxtools.git
  echo ""

  echo -e $BLUE"Cloning hashcat repository"$ENDCOLOR;
  git clone https://github.com/hashcat/hashcat.git
  echo ""

  up2_default="Y"  
  read -p "Would you like to update and upgrade before installation? [$up2_default,n] " up2_default
  up2=${up2:-$up2_default}
	
  if [[ $up2 = "up2_default" || $up2 = "y" ]]; then

    echo -e $BLUE"Updating and Upgrading.."$ENDCOLOR;
    echo ""
    sudo dpkg --configure -a
    sudo apt autoremove
    sudo apt update
    sudo apt install -f
    sudo apt upgrade
    sudo apt dist-upgrade
    echo ""
    echo ""
	
  else

    echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
    echo ""

  fi
  
  pre_default="Y"
  read -p "Would you like to install prerequisites? [$pre_default,n] " pre_default
  pre=${pre:-$pre_default}

  if [[ $pre = "pre_default" || $pre = "y" ]]; then

    echo -e $BLUE"Installing prerequisites.."$ENDCOLOR;
    echo ""
    sudo apt-get build-dep wifite reaver pixiewps wpscan libpcap-dev aircrack-ng sqlite3 libsqlite3-dev libssl-dev
    sudo apt install wifite reaver pixiewps wpscan libpcap-dev aircrack-ng sqlite3 libsqlite3-dev libssl-dev -y
    echo ""

  else

    echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
    echo ""

  fi

  echo -e $BLUE"Installing pixiewps.."$ENDCOLOR;
  echo ""
  cd $HOMEPATH/backup/pixiewps/
  make
  echo ""
  sudo make install
  echo ""

  echo -e $BLUE"Installing reaver-wps-fork-t6x.."$ENDCOLOR;
  echo ""
  cd $HOMEPATH/backup/reaver-wps-fork-t6x/src/
  echo ""
  echo -e $BLUE"Configuring.."$ENDCOLOR;
  echo ""
  ./configure
  echo ""
  echo -e $BLUE"Compiling.."$ENDCOLOR;
  make 
  echo ""
  echo -e $BLUE"Installing .."$ENDCOLOR;
  echo ""
  sudo make install
  echo ""
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""

  echo -e $BLUE"Adding modified wifite and wifite-ng to /usr/bin.."$ENDCOLOR;
  echo ""	
  sudo cp $HOMEPATH/backup/wifite/wifite.py /usr/local/bin/wifite-ng
  sudo chmod +x /usr/local/bin/wifite-ng
  echo ""
 
  #echo -e $BLUE"Patching wfite-ng.."$ENDCOLOR;
  #echo ""
  #sudo cp $INSTALLPATH/solid-scripts/assets/wifite-ng-patch /usr/local/bin/wifite-ng
  #sudo sed -i 's/usr\/share\/wfuzz\/wordlist\/fuzzdb\/wordlists-user-passwd\/passwds\/phpbb.txt/usr\/share\/fuzzdb\/wordlists-user-passwd\/passwds\/phpbb.txt/g' /usr/local/bin/wifite-ng
  #sudo sed -i "s/self.WPA_HANDSHAKE_DIR \= \'hs\'/self.WPA_HANDSHAKE_DIR \= \'\/captures\/hs\'/g" /usr/local/bin/wifite-ng
  echo ""
  echo -e $BLUE"Adding wordlists.."$ENDCOLOR;
  cd /usr/share/
  sudo git clone https://github.com/fuzzdb-project/fuzzdb.git
  echo ""

else

  echo -e $YELLOW"Okay, maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

art_default="Y"
read -p "Would you like to download SolidOptionOS artwork - Solid-Art? [$art_default/n] " art_default
art=${art:-$art_default}

if [[ $art = "art_default" || $art = "y" ]] ; then
	
  echo -e $BLUE"Downloading into $HOMEPATH/Pictures.."$ENDCOLOR;
  echo ""
  echo ""
	
  if [[ ! -e $HOMEPATH/Pictures ]] ; then
		
    mkdir -p $HOMEPATH/Pictures
    cd $HOMEPATH/Pictures
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""
	
    echo -e $BLUE"Downloading artwork for SolidOptionOS server.."$ENDCOLOR;
    echo ""

    if [[ ! -e $HOMEPATH/Pictures/art-zero.zip ]] ; then		
			
      wget http://solidoptionos.com/assets/art-zero.zip
      wget http://solidoptionos.com/assets/sexy.zip
      echo -e $GREEN"Done."$ENDCOLOR;
      echo ""
      echo ""

    else 
  
      echo -e $BLUE"Solid-Art download archive already exists."$ENDCOLOR;
      echo ""
		
    fi
                        
    echo -e $GREEN"Download Complete."$ENDCOLOR;
    echo ""
    echo ""

    echo -e $BLUE"Extracting.."$ENDCOLOR;
    echo ""
    unzip art-zero.zip
    unzip sexy.zip
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""

    echo -e $BLUE"Cleaning up.."$ENDCOLOR;
    echo ""
    rm -rf __MACOSX/
    rm art-zero.zip
    rm sexy.zip
    chmod -R 777 *
    echo -e $GREEN"Success! Solid-Art is now available in $HOMEPATH/Pictures. "$ENDCOLOR;
    echo ""
    echo ""
 
  else

    overwrite_default="Y"	  
    read -p "Artwork already exists in $HOMEPATH/Pictures. Do you want to overwrite/merge it with a new download? [$overwrite_default,n] " overwrite_default
    overwrite=${overwrite:-$overwrite_default}

    if [[ $overwrite = "overwrite_default" || $overwrite = "y" ]] ; then
			
      sudo rm -rf $HOMEPATH/Pictures/art-zero.zip
      mkdir -p $HOMEPATH/Pictures/
      cd $HOMEPATH/Pictures/
      wget http://solidoptionos.com/assets/art-zero.zip
      wget http://solidoptionos.com/assets/sexy.zip
      echo -e $GREEN"Done."$ENDCOLOR;
      echo ""
      echo ""

      echo -e $BLUE"Extracting.."$ENDCOLOR;
      echo ""
      unzip art-zero.zip
      unzip sexy.zip
      echo -e $GREEN"Done."$ENDCOLOR;
      echo ""
      echo ""

      echo -e $BLUE"Cleaning up.."$ENDCOLOR;
      echo ""
      rm -rf __MACOSX/
      rm art-zero.zip
      rm sexy.zip
      chmod -R 777 *
      echo ""
      echo -e $GREEN"Success! Solid-Art has been updated to the latest version. "$ENDCOLOR;
      echo ""
 
    else
 
      echo -e $YELLOW"Okay. Skipping."$ENDCOLOR;
      echo ""
      echo ""
  
    fi
       
  fi

else
  
  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi

oui_default="Y"
read -p "Would you like to update ieee-data? This may take a long time depeding on your system. [$oui_default/n] " oui_default
oui=${oui:-$oui_default}

if [[ $oui = "oui_default" || $oui = "y" ]] ; then

  echo -e $BLUE"Updating.."$ENDCOLOR;
  echo ""
  sudo apt install ieee-data
  echo "" 
  sudo airodump-ng-oui-update
  sudo update-ieee-data
  echo -e $GREEN"Update of ieee-data complete."$ENDCOLOR;
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi

echo -e $BLUE"Wrapping up the post install with necessary updates.."$ENDCOLOR;
echo ""
echo ""
sudo update-default-aspell
sudo update-default-ispell
sudo update-default-wordlist
sudo update-dictcommon-aspell
sudo update-dictoommon-hunspell
sudo update-desktop-database
sudo update-passwd
sudo update-cracklib

echo -e $BLUE"[updatedb]"$ENDCOLOR;
echo ""
sudo updatedb -v --prunepaths /mnt

echo -e $BLUE"[updatedb.mlocate]"$ENDCOLOR;
echo ""
sudo updatedb.mlocate -v --prunepaths /mnt
sudo updatedb.findutils
echo -e $BLUE"[update-menus]"$ENDCOLOR;
echo ""
sudo update-menus

echo -e $BLUE"[update-usbids]"$ENDCOLOR;
echo ""
sudo update-usbids

echo -e $BLUE"[update-pciids]"$ENDCOLOR;
echo ""
sudo update-pciids

echo -e $BLUE"[update-initramfs -uv]"$ENDCOLOR;
echo ""
sudo update-initramfs -uv

echo -e $BLUE"[update-grub]"$ENDCOLOR;
echo ""
sudo update-grub

echo -e $BLUE"[update-grub2]"$ENDCOLOR;
echo ""
sudo update-grub2

echo -e $BLUE"Syncing.."$ENDCOLOR;
echo ""
sync
rsync

echo ""
echo -e $GREEN"Wrap up complete."$ENDCOLOR;
echo ""
echo -e $BLUE"#################################"$ENDCOLOR;
echo -e $YELLOW"#      Operation Complete.       #"$ENDCOLOR;
echo -e $BLUE"#################################"$ENDCOLOR;
